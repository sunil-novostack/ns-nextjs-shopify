{"ast":null,"code":"import axios from 'axios';\nimport cheerio from 'cheerio';\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const response = await axios({\n          headers: {\n            \"x-api-key\": \"0c63e893-4bc0-44ca\"\n          },\n          url: \"/detail\",\n          method: \"get\",\n          baseURL: 'https://ecomapp.io/data',\n          params: {\n            url: query.url,\n            ecom: query.ecom,\n            product_id: 0,\n            db_entry: 0\n          }\n        });\n        console.log(response.data);\n\n        if (response.data) {\n          const product = await {\n            title: response.data.items[0].product_title,\n            images: response.data.items[0].images,\n            items: responsedata.items,\n            options: []\n          };\n\n          if (response.data.has_variations) {\n            Promise.all(response.data.items.map((item, i) => {\n              item.modifiers.map((modifier, j) => {\n                if (product.options.length > 0) {\n                  options.map((option, k) => {\n                    if (option.name != modifier.name) {\n                      const option = {\n                        name: modifier.name,\n                        values: [modifier.value]\n                      };\n                      product.options.push(option);\n                    } else {\n                      option.values.push(modifier.value);\n                    }\n                  });\n                } else {\n                  console.log(modifier);\n                  const option = {\n                    name: modifier.name,\n                    values: [modifier.value]\n                  };\n                  product.options.push(option);\n                }\n              });\n            }));\n          }\n\n          console.log(product);\n        }\n        /*\r\n        if(Array.isArray(response.data) && response.data.length>0){\r\n            const variants = []\r\n            Promise.all(\r\n                response.data.map( async (variant)=>{\r\n                    variants.push({\r\n                        name : variant.modifiers,\r\n                        price: variant.product_price,\r\n                    })\r\n                })\r\n            )\r\n            \r\n            const prodObj = await{\r\n                title: response.data[0].product_title,\r\n                description: response.data[0].description ? response.data.description : '',\r\n                price:response.data[0].product_price,\r\n                images:response.data[0].images,\r\n                sourceUrl:response.data[0].product_url,\r\n                source:query.ecom,\r\n                variants:variants,\r\n            }\r\n            \r\n            res.status(200).json({success:true,productDetail:prodObj})\r\n        }else if(!Array.isArray(response.data)){\r\n            const prodObj = await {\r\n                title: response.data.product_title,\r\n                description: response.data.description ? response.data.description : '',\r\n                price:response.data.product_price,\r\n                images:response.data.images,\r\n                sourceUrl:response.data.product_url,\r\n                source:query.ecom,\r\n                variants:false,\r\n            }\r\n            res.status(200).json({success:true,productDetail:prodObj})\r\n        }else{\r\n            res.status(200).json({success:true,productDetail:null})\r\n        }\r\n        */\n\n\n        res.status(200).json({\n          success: true,\n          product: response.data\n        });\n      } catch (error) {\n        //console.log(error)\n        res.status(500).json({\n          success: false,\n          error: error\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const product = {};\n        res.status(201).json({\n          success: true,\n          data: product\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/pages/api/scrap-product-detail/index.js"],"names":["axios","cheerio","req","res","method","query","response","headers","url","baseURL","params","ecom","product_id","db_entry","console","log","data","product","title","items","product_title","images","responsedata","options","has_variations","Promise","all","map","item","i","modifiers","modifier","j","length","option","k","name","values","value","push","status","json","success","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport cheerio from 'cheerio';\r\n\r\nexport default async (req,res) => {\r\n    const {method,query} = req;\r\n    switch(method){\r\n        case 'GET':\r\n            try{\r\n                \r\n                const response = await axios({\r\n                  headers: {\r\n                    \"x-api-key\": \"0c63e893-4bc0-44ca\",\r\n                  },\r\n                  url: \"/detail\",\r\n                  method: \"get\",\r\n                  baseURL:'https://ecomapp.io/data',\r\n                  params: {\r\n                    url: query.url,\r\n                    ecom: query.ecom,\r\n                    product_id: 0,\r\n                    db_entry: 0,\r\n                  },\r\n                });\r\n                \r\n                console.log(response.data)\r\n                if(response.data){\r\n                    const product = await {\r\n                        title : response.data.items[0].product_title,\r\n                        images :  response.data.items[0].images,\r\n                        items : responsedata.items,\r\n                        options:[]\r\n                    };\r\n                    if(response.data.has_variations){\r\n                        Promise.all(\r\n                            response.data.items.map((item,i) =>{\r\n                                item.modifiers.map((modifier,j)=>{\r\n\r\n                                    if(product.options.length>0){\r\n                                        \r\n                                        options.map((option,k)=>{\r\n                                            if(option.name!=modifier.name){\r\n                                                const option = {\r\n                                                    name : modifier.name,\r\n                                                    values : [modifier.value]\r\n                                                }\r\n                                                product.options.push(option) \r\n                                            }else{\r\n                                                option.values.push(modifier.value)\r\n                                            }    \r\n                                        })\r\n                                    }else{   \r\n                                        console.log(modifier)                                 \r\n                                        const option = {\r\n                                            name : modifier.name,\r\n                                            values : [modifier.value]\r\n                                        }\r\n                                        product.options.push(option)\r\n                                    }\r\n\r\n                                })\r\n                                \r\n                            })\r\n                        )\r\n                    }\r\n                    console.log(product)\r\n                }\r\n                /*\r\n                if(Array.isArray(response.data) && response.data.length>0){\r\n                    const variants = []\r\n                    Promise.all(\r\n                        response.data.map( async (variant)=>{\r\n                            variants.push({\r\n                                name : variant.modifiers,\r\n                                price: variant.product_price,\r\n                            })\r\n                        })\r\n                    )\r\n                    \r\n                    const prodObj = await{\r\n                        title: response.data[0].product_title,\r\n                        description: response.data[0].description ? response.data.description : '',\r\n                        price:response.data[0].product_price,\r\n                        images:response.data[0].images,\r\n                        sourceUrl:response.data[0].product_url,\r\n                        source:query.ecom,\r\n                        variants:variants,\r\n                    }\r\n                    \r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }else if(!Array.isArray(response.data)){\r\n                    const prodObj = await {\r\n                        title: response.data.product_title,\r\n                        description: response.data.description ? response.data.description : '',\r\n                        price:response.data.product_price,\r\n                        images:response.data.images,\r\n                        sourceUrl:response.data.product_url,\r\n                        source:query.ecom,\r\n                        variants:false,\r\n                    }\r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }else{\r\n                    res.status(200).json({success:true,productDetail:null})\r\n                }\r\n                */\r\n               res.status(200).json({success:true,product:response.data})\r\n            }catch(error){\r\n                //console.log(error)\r\n                res.status(500).json({success:false,error:error})\r\n            }\r\n            break;\r\n        case 'POST':\r\n            try{\r\n                const product = {}\r\n\r\n                res.status(201).json({success:true,data:product})\r\n\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}