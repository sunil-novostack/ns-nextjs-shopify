{"ast":null,"code":"import axios from 'axios';\nimport cheerio from 'cheerio';\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const response = await axios({\n          headers: {\n            \"x-api-key\": \"0c63e893-4bc0-44ca\"\n          },\n          url: \"/detail\",\n          method: \"get\",\n          baseURL: 'https://ecomapp.io/data',\n          params: {\n            url: query.url,\n            ecom: query.ecom,\n            product_id: 0,\n            db_entry: 0\n          }\n        });\n        /*\r\n         const {response} = await axios.post(query.url)\r\n         console.log(response)\r\n         \r\n         const $ = cheerio.load(response)\r\n         let images = [];\r\n         $('.slider-frame .slider-list li').each((i,li) => {\r\n             let img = $(li).find('img').attr('src')\r\n             let image = img.match(/.*?[?!.]/g);\r\n             images.push(image[0])\r\n         })\r\n         const products = {\r\n             product_title : $('h1.prod-ProductTitle').text(),\r\n             description:$('div.about-product-standard').html(),\r\n             product_price:$('.prod-PriceHero span.price-characteristic').text(),\r\n             currency:{\r\n                 currency_type:$('.prod-PriceHero span.price-currency').attr('content'),\r\n                 currency_sign:$('.prod-PriceHero span.price-currency').text()\r\n             },\r\n             images:images\r\n         }\r\n         */\n\n        res.status(200).json({\n          success: true,\n          productDetail: {}\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const product = {};\n        res.status(201).json({\n          success: true,\n          data: product\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/pages/api/scrap-product-detail/index.js"],"names":["axios","cheerio","req","res","method","query","response","headers","url","baseURL","params","ecom","product_id","db_entry","status","json","success","productDetail","error","product","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,gBAAe,OAAOC,GAAP,EAAWC,GAAX,KAAmB;AAC9B,QAAM;AAACC,IAAAA,MAAD;AAAQC,IAAAA;AAAR,MAAiBH,GAAvB;;AACA,UAAOE,MAAP;AACI,SAAK,KAAL;AACI,UAAG;AAEC,cAAME,QAAQ,GAAG,MAAMN,KAAK,CAAC;AAC3BO,UAAAA,OAAO,EAAE;AACP,yBAAa;AADN,WADkB;AAI3BC,UAAAA,GAAG,EAAE,SAJsB;AAK3BJ,UAAAA,MAAM,EAAE,KALmB;AAM3BK,UAAAA,OAAO,EAAC,yBANmB;AAO3BC,UAAAA,MAAM,EAAE;AACNF,YAAAA,GAAG,EAAEH,KAAK,CAACG,GADL;AAENG,YAAAA,IAAI,EAAEN,KAAK,CAACM,IAFN;AAGNC,YAAAA,UAAU,EAAE,CAHN;AAINC,YAAAA,QAAQ,EAAE;AAJJ;AAPmB,SAAD,CAA5B;AAeD;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACgBV,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAcC,UAAAA,aAAa,EAAC;AAA5B,SAArB;AACH,OAxCD,CAwCC,OAAMC,KAAN,EAAY;AACTf,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ,SAAK,MAAL;AACI,UAAG;AACC,cAAMG,OAAO,GAAG,EAAhB;AAEAhB,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAcI,UAAAA,IAAI,EAACD;AAAnB,SAArB;AAEH,OALD,CAKC,OAAMD,KAAN,EAAY;AACTf,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ;AACIb,MAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAC;AAAT,OAArB;AACA;AA1DR;AA4DH,CA9DD","sourcesContent":["import axios from 'axios';\r\nimport cheerio from 'cheerio';\r\n\r\nexport default async (req,res) => {\r\n    const {method,query} = req;\r\n    switch(method){\r\n        case 'GET':\r\n            try{\r\n                \r\n                const response = await axios({\r\n                  headers: {\r\n                    \"x-api-key\": \"0c63e893-4bc0-44ca\",\r\n                  },\r\n                  url: \"/detail\",\r\n                  method: \"get\",\r\n                  baseURL:'https://ecomapp.io/data',\r\n                  params: {\r\n                    url: query.url,\r\n                    ecom: query.ecom,\r\n                    product_id: 0,\r\n                    db_entry: 0,\r\n                  },\r\n                });\r\n                \r\n               /*\r\n                const {response} = await axios.post(query.url)\r\n                console.log(response)\r\n                \r\n                const $ = cheerio.load(response)\r\n                let images = [];\r\n                $('.slider-frame .slider-list li').each((i,li) => {\r\n                    let img = $(li).find('img').attr('src')\r\n                    let image = img.match(/.*?[?!.]/g);\r\n                    images.push(image[0])\r\n                })\r\n                const products = {\r\n                    product_title : $('h1.prod-ProductTitle').text(),\r\n                    description:$('div.about-product-standard').html(),\r\n                    product_price:$('.prod-PriceHero span.price-characteristic').text(),\r\n                    currency:{\r\n                        currency_type:$('.prod-PriceHero span.price-currency').attr('content'),\r\n                        currency_sign:$('.prod-PriceHero span.price-currency').text()\r\n                    },\r\n                    images:images\r\n                }\r\n                */\r\n                res.status(200).json({success:true,productDetail:{}})\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        case 'POST':\r\n            try{\r\n                const product = {}\r\n\r\n                res.status(201).json({success:true,data:product})\r\n\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}