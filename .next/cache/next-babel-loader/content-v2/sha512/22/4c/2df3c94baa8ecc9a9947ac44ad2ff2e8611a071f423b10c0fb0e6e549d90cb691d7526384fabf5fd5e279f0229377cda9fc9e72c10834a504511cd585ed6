{"ast":null,"code":"import axios from 'axios';\nimport cheerio from 'cheerio';\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const response = await axios({\n          headers: {\n            \"x-api-key\": \"0c63e893-4bc0-44ca\"\n          },\n          url: \"/detail\",\n          method: \"get\",\n          baseURL: 'https://ecomapp.io/data',\n          params: {\n            url: query.url,\n            ecom: query.ecom,\n            product_id: 0,\n            db_entry: 0\n          }\n        });\n\n        if (Array.isArray(response.data)) {\n          const variants = [];\n          Promise.all(response.data.map(async variant => {\n            variants.push({\n              name: variant.modifiers,\n              price: variant.product_price\n            });\n          }));\n          const prodObj = await {\n            title: response.data[0].product_title,\n            description: response.data[0].description ? response.data.description : '',\n            price: response.data[0].product_price,\n            images: response.data[0].images,\n            sourceUrl: response.data[0].product_url,\n            source: query.ecom,\n            variants: variants\n          };\n          res.status(200).json({\n            success: true,\n            productDetail: prodObj\n          });\n        } else {\n          const prodObj = await {\n            title: response.data.product_title,\n            description: response.data.description ? response.data.description : '',\n            price: response.data.product_price,\n            images: response.data.images,\n            sourceUrl: response.data.product_url,\n            source: query.ecom,\n            variants: false\n          };\n          res.status(200).json({\n            success: true,\n            productDetail: prodObj\n          });\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const product = {};\n        res.status(201).json({\n          success: true,\n          data: product\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/pages/api/scrap-product-detail/index.js"],"names":["axios","cheerio","req","res","method","query","response","headers","url","baseURL","params","ecom","product_id","db_entry","Array","isArray","data","variants","Promise","all","map","variant","push","name","modifiers","price","product_price","prodObj","title","product_title","description","images","sourceUrl","product_url","source","status","json","success","productDetail","error","console","log","product"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport cheerio from 'cheerio';\r\n\r\nexport default async (req,res) => {\r\n    const {method,query} = req;\r\n    switch(method){\r\n        case 'GET':\r\n            try{\r\n                \r\n                const response = await axios({\r\n                  headers: {\r\n                    \"x-api-key\": \"0c63e893-4bc0-44ca\",\r\n                  },\r\n                  url: \"/detail\",\r\n                  method: \"get\",\r\n                  baseURL:'https://ecomapp.io/data',\r\n                  params: {\r\n                    url: query.url,\r\n                    ecom: query.ecom,\r\n                    product_id: 0,\r\n                    db_entry: 0,\r\n                  },\r\n                });\r\n                if(Array.isArray(response.data)){\r\n\r\n                    const variants = []\r\n                    Promise.all(\r\n                        response.data.map( async (variant)=>{\r\n                            variants.push({\r\n                                name : variant.modifiers,\r\n                                price: variant.product_price,\r\n                            })\r\n                        })\r\n                    )\r\n                    const prodObj = await{\r\n                        title: response.data[0].product_title,\r\n                        description: response.data[0].description ? response.data.description : '',\r\n                        price:response.data[0].product_price,\r\n                        images:response.data[0].images,\r\n                        sourceUrl:response.data[0].product_url,\r\n                        source:query.ecom,\r\n                        variants:variants,\r\n                    }\r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }else{\r\n                    const prodObj = await {\r\n                        title: response.data.product_title,\r\n                        description: response.data.description ? response.data.description : '',\r\n                        price:response.data.product_price,\r\n                        images:response.data.images,\r\n                        sourceUrl:response.data.product_url,\r\n                        source:query.ecom,\r\n                        variants:false,\r\n                    }\r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }\r\n                \r\n            }catch(error){\r\n                console.log(error)\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        case 'POST':\r\n            try{\r\n                const product = {}\r\n\r\n                res.status(201).json({success:true,data:product})\r\n\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}