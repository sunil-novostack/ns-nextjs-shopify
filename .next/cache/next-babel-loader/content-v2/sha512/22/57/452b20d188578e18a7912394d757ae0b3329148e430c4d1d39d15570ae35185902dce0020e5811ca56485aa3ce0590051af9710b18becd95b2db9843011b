{"ast":null,"code":"import axios from 'axios';\nimport cheerio from 'cheerio';\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const response = await axios({\n          headers: {\n            \"x-api-key\": \"0c63e893-4bc0-44ca\"\n          },\n          url: \"/detail\",\n          method: \"get\",\n          baseURL: 'https://ecomapp.io/data',\n          params: {\n            url: query.url,\n            ecom: query.ecom,\n            product_id: 0,\n            db_entry: 0\n          }\n        });\n\n        if (Array.isArray(response.data)) {\n          console.log('inside');\n          const prodObj = await {};\n        } else {\n          console.log('out side');\n          const prodObj = await {\n            title: response.data.product_title,\n            description: response.data.product_title ? response.data.product_title : '',\n            price: response.data.product_price,\n            images: response.data.images,\n            sourceUrl: response.data.product_url,\n            source: query.ecom\n          };\n        }\n\n        res.status(200).json({\n          success: true,\n          productDetail: prodObj\n        });\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const product = {};\n        res.status(201).json({\n          success: true,\n          data: product\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/pages/api/scrap-product-detail/index.js"],"names":["axios","cheerio","req","res","method","query","response","headers","url","baseURL","params","ecom","product_id","db_entry","Array","isArray","data","console","log","prodObj","title","product_title","description","price","product_price","images","sourceUrl","product_url","source","status","json","success","productDetail","error","product"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,gBAAe,OAAOC,GAAP,EAAWC,GAAX,KAAmB;AAC9B,QAAM;AAACC,IAAAA,MAAD;AAAQC,IAAAA;AAAR,MAAiBH,GAAvB;;AACA,UAAOE,MAAP;AACI,SAAK,KAAL;AACI,UAAG;AAEC,cAAME,QAAQ,GAAG,MAAMN,KAAK,CAAC;AAC3BO,UAAAA,OAAO,EAAE;AACP,yBAAa;AADN,WADkB;AAI3BC,UAAAA,GAAG,EAAE,SAJsB;AAK3BJ,UAAAA,MAAM,EAAE,KALmB;AAM3BK,UAAAA,OAAO,EAAC,yBANmB;AAO3BC,UAAAA,MAAM,EAAE;AACNF,YAAAA,GAAG,EAAEH,KAAK,CAACG,GADL;AAENG,YAAAA,IAAI,EAAEN,KAAK,CAACM,IAFN;AAGNC,YAAAA,UAAU,EAAE,CAHN;AAINC,YAAAA,QAAQ,EAAE;AAJJ;AAPmB,SAAD,CAA5B;;AAcA,YAAGC,KAAK,CAACC,OAAN,CAAcT,QAAQ,CAACU,IAAvB,CAAH,EAAgC;AAC5BC,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,gBAAMC,OAAO,GAAG,MAAK,EAArB;AAGH,SALD,MAKK;AACDF,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,gBAAMC,OAAO,GAAG,MAAM;AAClBC,YAAAA,KAAK,EAAEd,QAAQ,CAACU,IAAT,CAAcK,aADH;AAElBC,YAAAA,WAAW,EAAEhB,QAAQ,CAACU,IAAT,CAAcK,aAAd,GAA8Bf,QAAQ,CAACU,IAAT,CAAcK,aAA5C,GAA4D,EAFvD;AAGlBE,YAAAA,KAAK,EAACjB,QAAQ,CAACU,IAAT,CAAcQ,aAHF;AAIlBC,YAAAA,MAAM,EAACnB,QAAQ,CAACU,IAAT,CAAcS,MAJH;AAKlBC,YAAAA,SAAS,EAACpB,QAAQ,CAACU,IAAT,CAAcW,WALN;AAMlBC,YAAAA,MAAM,EAACvB,KAAK,CAACM;AANK,WAAtB;AAQH;;AACDR,QAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAcC,UAAAA,aAAa,EAACb;AAA5B,SAArB;AACH,OAjCD,CAiCC,OAAMc,KAAN,EAAY;AACThB,QAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACA9B,QAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ,SAAK,MAAL;AACI,UAAG;AACC,cAAMG,OAAO,GAAG,EAAhB;AAEA/B,QAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAcf,UAAAA,IAAI,EAACkB;AAAnB,SAArB;AAEH,OALD,CAKC,OAAMD,KAAN,EAAY;AACT9B,QAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ;AACI5B,MAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAC;AAAT,OAArB;AACA;AApDR;AAsDH,CAxDD","sourcesContent":["import axios from 'axios';\r\nimport cheerio from 'cheerio';\r\n\r\nexport default async (req,res) => {\r\n    const {method,query} = req;\r\n    switch(method){\r\n        case 'GET':\r\n            try{\r\n                \r\n                const response = await axios({\r\n                  headers: {\r\n                    \"x-api-key\": \"0c63e893-4bc0-44ca\",\r\n                  },\r\n                  url: \"/detail\",\r\n                  method: \"get\",\r\n                  baseURL:'https://ecomapp.io/data',\r\n                  params: {\r\n                    url: query.url,\r\n                    ecom: query.ecom,\r\n                    product_id: 0,\r\n                    db_entry: 0,\r\n                  },\r\n                });\r\n                if(Array.isArray(response.data)){\r\n                    console.log('inside')\r\n                    const prodObj = await{\r\n\r\n                    }\r\n                }else{\r\n                    console.log('out side')\r\n                    const prodObj = await {\r\n                        title: response.data.product_title,\r\n                        description: response.data.product_title ? response.data.product_title : '',\r\n                        price:response.data.product_price,\r\n                        images:response.data.images,\r\n                        sourceUrl:response.data.product_url,\r\n                        source:query.ecom,\r\n                    }\r\n                }\r\n                res.status(200).json({success:true,productDetail:prodObj})\r\n            }catch(error){\r\n                console.log(error)\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        case 'POST':\r\n            try{\r\n                const product = {}\r\n\r\n                res.status(201).json({success:true,data:product})\r\n\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}