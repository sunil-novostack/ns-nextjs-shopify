{"ast":null,"code":"/*\r\nimport dbConnect from '../../../lib/mongoose/dbConnect';\r\nimport Product from '../../../lib/mongoose/Product';\r\n\r\ndbConnect();\r\n*/\nimport { connectToDatabase } from '../../../lib/mongoose/dbCon';\nexport default (async (req, res) => {\n  const {\n    db\n  } = await connectToDatabase();\n  const {\n    method,\n    headers,\n    query\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const response = await db.collection(headers.shopname + '.settings').findOne({\n          item: 1,\n          status: 1,\n          _id: 0\n        });\n        res.status(200).json({\n          success: true,\n          settings: response.data\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        //const product = await Product.create(req.body)\n        const response = await db.collection(headers.shopname + '.settings').insertOne(req.body);\n        res.status(201).json({\n          success: true,\n          data: response\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false,\n          error: error\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/pages/api/settings/index.js"],"names":["connectToDatabase","req","res","db","method","headers","query","response","collection","shopname","findOne","item","status","_id","json","success","settings","data","error","insertOne","body"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,6BAAhC;AAEA,gBAAe,OAAOC,GAAP,EAAWC,GAAX,KAAmB;AAC9B,QAAM;AAACC,IAAAA;AAAD,MAAO,MAAMH,iBAAiB,EAApC;AACA,QAAM;AAACI,IAAAA,MAAD;AAAQC,IAAAA,OAAR;AAAgBC,IAAAA;AAAhB,MAAyBL,GAA/B;;AACA,UAAOG,MAAP;AACI,SAAK,KAAL;AACI,UAAG;AACC,cAAMG,QAAQ,GAAG,MAAMJ,EAAE,CAACK,UAAH,CAAcH,OAAO,CAACI,QAAR,GAAiB,WAA/B,EAA4CC,OAA5C,CAAoD;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,MAAM,EAAE,CAAnB;AAAsBC,UAAAA,GAAG,EAAE;AAA3B,SAApD,CAAvB;AACAX,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAcC,UAAAA,QAAQ,EAACT,QAAQ,CAACU;AAAhC,SAArB;AACH,OAHD,CAGC,OAAMC,KAAN,EAAY;AACThB,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ,SAAK,MAAL;AACI,UAAG;AACC;AACA,cAAMR,QAAQ,GAAG,MAAMJ,EAAE,CAACK,UAAH,CAAcH,OAAO,CAACI,QAAR,GAAiB,WAA/B,EAA4CU,SAA5C,CAAsDlB,GAAG,CAACmB,IAA1D,CAAvB;AACAlB,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAcE,UAAAA,IAAI,EAACV;AAAnB,SAArB;AACH,OAJD,CAIC,OAAMW,KAAN,EAAY;AACThB,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,KAAT;AAAeG,UAAAA,KAAK,EAACA;AAArB,SAArB;AACH;;AACD;;AACJ;AACIhB,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAC;AAAT,OAArB;AACA;AApBR;AAsBH,CAzBD","sourcesContent":["/*\r\nimport dbConnect from '../../../lib/mongoose/dbConnect';\r\nimport Product from '../../../lib/mongoose/Product';\r\n\r\ndbConnect();\r\n*/\r\n\r\nimport {connectToDatabase} from '../../../lib/mongoose/dbCon';\r\n\r\nexport default async (req,res) => {\r\n    const {db} = await connectToDatabase();\r\n    const {method,headers,query} = req;\r\n    switch(method){\r\n        case 'GET':\r\n            try{      \r\n                const response = await db.collection(headers.shopname+'.settings').findOne({ item: 1, status: 1, _id: 0 })\r\n                res.status(200).json({success:true,settings:response.data})\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        case 'POST':\r\n            try{\r\n                //const product = await Product.create(req.body)\r\n                const response = await db.collection(headers.shopname+'.settings').insertOne(req.body)\r\n                res.status(201).json({success:true,data:response})\r\n            }catch(error){\r\n                res.status(400).json({success:false,error:error})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}