{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MongoClient } from 'mongodb';\nvar _process$env = process.env,\n    SHOPIFY_MONGO_URI = _process$env.SHOPIFY_MONGO_URI,\n    SHOPIFY_MONGO_DB = _process$env.SHOPIFY_MONGO_DB;\nvar cached = global.mongo;\n\nif (!cached) {\n  cached = global.mongo = {\n    conn: null,\n    promise: null\n  };\n}\n\nexport function connectToDatabase() {\n  return _connectToDatabase.apply(this, arguments);\n}\n\nfunction _connectToDatabase() {\n  _connectToDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var opts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!cached.conn) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", cached.conn);\n\n          case 2:\n            if (!cached.promise) {\n              opts = {\n                useNewUrlParser: true,\n                useUnifiedTopology: true\n              };\n              cached.promise = MongoClient.connect(SHOPIFY_MONGO_URI, opts).then(function (client) {\n                return {\n                  client: client,\n                  db: client.db(SHOPIFY_MONGO_DB)\n                };\n              });\n            }\n\n            _context.next = 5;\n            return cached.promise;\n\n          case 5:\n            cached.conn = _context.sent;\n            return _context.abrupt(\"return\", cached.conn);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectToDatabase.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/lib/mongoose/dbCon.js"],"names":["MongoClient","process","env","SHOPIFY_MONGO_URI","SHOPIFY_MONGO_DB","cached","global","mongo","conn","promise","connectToDatabase","opts","useNewUrlParser","useUnifiedTopology","connect","then","client","db"],"mappings":";;AAAA,SAAQA,WAAR,QAA0B,SAA1B;mBAE6CC,OAAO,CAACC,G;IAA9CC,iB,gBAAAA,iB;IAAkBC,gB,gBAAAA,gB;AACzB,IAAIC,MAAM,GAAGC,MAAM,CAACC,KAApB;;AAEA,IAAG,CAACF,MAAJ,EAAW;AACPA,EAAAA,MAAM,GAAGC,MAAM,CAACC,KAAP,GAAe;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAaC,IAAAA,OAAO,EAAC;AAArB,GAAxB;AACH;;AAED,gBAAuBC,iBAAvB;AAAA;AAAA;;;gFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACAL,MAAM,CAACG,IADP;AAAA;AAAA;AAAA;;AAAA,6CAEQH,MAAM,CAACG,IAFf;;AAAA;AAIH,gBAAG,CAACH,MAAM,CAACI,OAAX,EAAmB;AACTE,cAAAA,IADS,GACF;AACTC,gBAAAA,eAAe,EAAC,IADP;AAETC,gBAAAA,kBAAkB,EAAC;AAFV,eADE;AAMfR,cAAAA,MAAM,CAACI,OAAP,GAAiBT,WAAW,CAACc,OAAZ,CAAoBX,iBAApB,EAAsCQ,IAAtC,EAA4CI,IAA5C,CAAiD,UAACC,MAAD,EAAY;AAC1E,uBAAO;AACHA,kBAAAA,MAAM,EAANA,MADG;AAEHC,kBAAAA,EAAE,EAACD,MAAM,CAACC,EAAP,CAAUb,gBAAV;AAFA,iBAAP;AAIH,eALgB,CAAjB;AAMH;;AAhBE;AAAA,mBAiBiBC,MAAM,CAACI,OAjBxB;;AAAA;AAiBHJ,YAAAA,MAAM,CAACG,IAjBJ;AAAA,6CAkBIH,MAAM,CAACG,IAlBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {MongoClient} from 'mongodb';\r\n\r\nconst {SHOPIFY_MONGO_URI,SHOPIFY_MONGO_DB} = process.env\r\nlet cached = global.mongo\r\n\r\nif(!cached){\r\n    cached = global.mongo = { conn :null,promise:null }\r\n}\r\n\r\nexport async  function connectToDatabase(){\r\n    if(cached.conn){\r\n        return cached.conn\r\n    }\r\n    if(!cached.promise){\r\n        const opts = {\r\n            useNewUrlParser:true,\r\n            useUnifiedTopology:true,\r\n        }\r\n\r\n        cached.promise = MongoClient.connect(SHOPIFY_MONGO_URI,opts).then((client) => {\r\n            return {\r\n                client,\r\n                db:client.db(SHOPIFY_MONGO_DB)\r\n            }\r\n        })\r\n    }\r\n    cached.conn = await cached.promise\r\n    return cached.conn\r\n}"]},"metadata":{},"sourceType":"module"}