{"ast":null,"code":"import axios from 'axios';\nimport cheerio from 'cheerio';\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const response = await axios({\n          headers: {\n            \"x-api-key\": \"0c63e893-4bc0-44ca\"\n          },\n          url: \"/detail\",\n          method: \"get\",\n          baseURL: 'https://ecomapp.io/data',\n          params: {\n            url: query.url,\n            ecom: query.ecom,\n            product_id: 0,\n            db_entry: 0\n          }\n        }).then(async response => {\n          if (response.data) {\n            const product = await {\n              title: response.data.items[0].product_name,\n              description: '',\n              images: response.data.items[0].images,\n              items: [],\n              options: []\n            };\n            Promise.all(response.data.items.map(async (item, i) => {\n              const options = await [];\n              item.name = item.product_name + ' - ';\n              response.data.items[i].modifiers.map(async (modifier, m) => {\n                item.name += modifier.value;\n\n                if (m < response.data.items[i].modifiers.length) {\n                  item.name += ' / ';\n                }\n\n                if (i <= 0) {\n                  const tempobj = await {\n                    name: modifier.name,\n                    position: m,\n                    values: [modifier.value]\n                  };\n                  options[m] = await tempobj;\n                } else {\n                  options[m].values.push(modifier.value);\n                }\n              }); //product.options.push(item.modifiers)                                                             \n\n              response.data.items[i] = item;\n              responce.data.options = options;\n            })).then(() => {\n              product.items = response.data.items;\n              product.options = response.data.options;\n              res.status(200).json({\n                success: true,\n                product: product\n              });\n            }).catch(error => {\n              console.log(error);\n            });\n          }\n        }); //console.log(response.data)\n\n        /*\r\n        if(Array.isArray(response.data) && response.data.length>0){\r\n            const variants = []\r\n            Promise.all(\r\n                response.data.map( async (variant)=>{\r\n                    variants.push({\r\n                        name : variant.modifiers,\r\n                        price: variant.product_price,\r\n                    })\r\n                })\r\n            )\r\n            \r\n            const prodObj = await{\r\n                title: response.data[0].product_title,\r\n                description: response.data[0].description ? response.data.description : '',\r\n                price:response.data[0].product_price,\r\n                images:response.data[0].images,\r\n                sourceUrl:response.data[0].product_url,\r\n                source:query.ecom,\r\n                variants:variants,\r\n            }\r\n            \r\n            res.status(200).json({success:true,productDetail:prodObj})\r\n        }else if(!Array.isArray(response.data)){\r\n            const prodObj = await {\r\n                title: response.data.product_title,\r\n                description: response.data.description ? response.data.description : '',\r\n                price:response.data.product_price,\r\n                images:response.data.images,\r\n                sourceUrl:response.data.product_url,\r\n                source:query.ecom,\r\n                variants:false,\r\n            }\r\n            res.status(200).json({success:true,productDetail:prodObj})\r\n        }else{\r\n            res.status(200).json({success:true,productDetail:null})\r\n        }\r\n        */\n      } catch (error) {\n        //console.log(error)\n        res.status(500).json({\n          success: false,\n          error: error\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const product = {};\n        res.status(201).json({\n          success: true,\n          data: product\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/pages/api/scrap-product-detail/index.js"],"names":["axios","cheerio","req","res","method","query","response","headers","url","baseURL","params","ecom","product_id","db_entry","then","data","product","title","items","product_name","description","images","options","Promise","all","map","item","i","name","modifiers","modifier","m","value","length","tempobj","position","values","push","responce","status","json","success","catch","error","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport cheerio from 'cheerio';\r\n\r\nexport default async (req,res) => {\r\n    const {method,query} = req;\r\n    switch(method){\r\n        case 'GET':\r\n            try{\r\n                \r\n                const response = await axios({\r\n                  headers: {\r\n                    \"x-api-key\": \"0c63e893-4bc0-44ca\",\r\n                  },\r\n                  url: \"/detail\",\r\n                  method: \"get\",\r\n                  baseURL:'https://ecomapp.io/data',\r\n                  params: {\r\n                    url: query.url,\r\n                    ecom: query.ecom,\r\n                    product_id: 0,\r\n                    db_entry: 0,\r\n                  },\r\n                }).then( async (response) => {\r\n                    if(response.data){\r\n                        const product = await {\r\n                            title : response.data.items[0].product_name,\r\n                            description : '',\r\n                            images : response.data.items[0].images,\r\n                            items : [],\r\n                            options : []\r\n                        }    \r\n                        Promise.all(                            \r\n                            response.data.items.map( async (item,i) =>{\r\n                                const options = await []\r\n                                item.name = item.product_name +' - '\r\n                                response.data.items[i].modifiers.map(async (modifier,m)=>{\r\n                                    item.name += modifier.value\r\n                                    if(m < response.data.items[i].modifiers.length){\r\n                                        item.name += ' / '\r\n                                    }\r\n                                    if(i<=0){\r\n                                        const tempobj = await {\r\n                                            name:modifier.name,\r\n                                            position:m,\r\n                                            values:[modifier.value]\r\n                                        }\r\n                                        options[m] = await tempobj\r\n                                    }else{\r\n                                        options[m].values.push(modifier.value)\r\n                                    }\r\n                                })\r\n\r\n                                //product.options.push(item.modifiers)                                                             \r\n                                response.data.items[i] = item\r\n                                responce.data.options = options                         \r\n                            })                                                \r\n                        ).then(()=>{\r\n                            product.items = response.data.items\r\n                            product.options = response.data.options\r\n\r\n                            res.status(200).json({success:true,product:product})\r\n                        }).catch((error)=>{\r\n                            console.log(error)\r\n                        })\r\n                    }                    \r\n                })\r\n                \r\n                //console.log(response.data)\r\n                \r\n                /*\r\n                if(Array.isArray(response.data) && response.data.length>0){\r\n                    const variants = []\r\n                    Promise.all(\r\n                        response.data.map( async (variant)=>{\r\n                            variants.push({\r\n                                name : variant.modifiers,\r\n                                price: variant.product_price,\r\n                            })\r\n                        })\r\n                    )\r\n                    \r\n                    const prodObj = await{\r\n                        title: response.data[0].product_title,\r\n                        description: response.data[0].description ? response.data.description : '',\r\n                        price:response.data[0].product_price,\r\n                        images:response.data[0].images,\r\n                        sourceUrl:response.data[0].product_url,\r\n                        source:query.ecom,\r\n                        variants:variants,\r\n                    }\r\n                    \r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }else if(!Array.isArray(response.data)){\r\n                    const prodObj = await {\r\n                        title: response.data.product_title,\r\n                        description: response.data.description ? response.data.description : '',\r\n                        price:response.data.product_price,\r\n                        images:response.data.images,\r\n                        sourceUrl:response.data.product_url,\r\n                        source:query.ecom,\r\n                        variants:false,\r\n                    }\r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }else{\r\n                    res.status(200).json({success:true,productDetail:null})\r\n                }\r\n                */\r\n               \r\n            }catch(error){\r\n                //console.log(error)\r\n                res.status(500).json({success:false,error:error})\r\n            }\r\n            break;\r\n        case 'POST':\r\n            try{\r\n                const product = {}\r\n\r\n                res.status(201).json({success:true,data:product})\r\n\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}