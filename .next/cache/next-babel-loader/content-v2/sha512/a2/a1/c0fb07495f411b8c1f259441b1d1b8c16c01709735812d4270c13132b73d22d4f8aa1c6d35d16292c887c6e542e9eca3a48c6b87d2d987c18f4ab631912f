{"ast":null,"code":"import axios from 'axios';\nimport cheerio from 'cheerio';\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const response = await axios({\n          headers: {\n            \"x-api-key\": \"0c63e893-4bc0-44ca\"\n          },\n          url: \"/detail\",\n          method: \"get\",\n          baseURL: 'https://ecomapp.io/data',\n          params: {\n            url: query.url,\n            ecom: query.ecom,\n            product_id: 0,\n            db_entry: 0\n          }\n        }).then(async response => {\n          if (response.data) {\n            const modifiers = await [],\n                  items = await [];\n            Promise.all(response.data.items.map(async (item, i) => {\n              modifiers.concat(item.modifiers);\n              item.product_name += ' - ';\n              response.data.items[i].modifiers.map(async modifier => {\n                name += ' / ' + modifier.value;\n              });\n              response.data.items[i] = item;\n            }));\n            const product = await {\n              title: response.data.items[0].product_title,\n              description: '',\n              images: response.data.items[0].images,\n              items: response.data.items,\n              options: modifiers\n            };\n            res.status(200).json({\n              success: true,\n              product: product\n            });\n          }\n        }); //console.log(response.data)\n\n        /*\r\n        if(Array.isArray(response.data) && response.data.length>0){\r\n            const variants = []\r\n            Promise.all(\r\n                response.data.map( async (variant)=>{\r\n                    variants.push({\r\n                        name : variant.modifiers,\r\n                        price: variant.product_price,\r\n                    })\r\n                })\r\n            )\r\n            \r\n            const prodObj = await{\r\n                title: response.data[0].product_title,\r\n                description: response.data[0].description ? response.data.description : '',\r\n                price:response.data[0].product_price,\r\n                images:response.data[0].images,\r\n                sourceUrl:response.data[0].product_url,\r\n                source:query.ecom,\r\n                variants:variants,\r\n            }\r\n            \r\n            res.status(200).json({success:true,productDetail:prodObj})\r\n        }else if(!Array.isArray(response.data)){\r\n            const prodObj = await {\r\n                title: response.data.product_title,\r\n                description: response.data.description ? response.data.description : '',\r\n                price:response.data.product_price,\r\n                images:response.data.images,\r\n                sourceUrl:response.data.product_url,\r\n                source:query.ecom,\r\n                variants:false,\r\n            }\r\n            res.status(200).json({success:true,productDetail:prodObj})\r\n        }else{\r\n            res.status(200).json({success:true,productDetail:null})\r\n        }\r\n        */\n      } catch (error) {\n        //console.log(error)\n        res.status(500).json({\n          success: false,\n          error: error\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const product = {};\n        res.status(201).json({\n          success: true,\n          data: product\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["E:/novostack/shopify/apps/ns-nextjs-shopify/pages/api/scrap-product-detail/index.js"],"names":["axios","cheerio","req","res","method","query","response","headers","url","baseURL","params","ecom","product_id","db_entry","then","data","modifiers","items","Promise","all","map","item","i","concat","product_name","modifier","name","value","product","title","product_title","description","images","options","status","json","success","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport cheerio from 'cheerio';\r\n\r\nexport default async (req,res) => {\r\n    const {method,query} = req;\r\n    switch(method){\r\n        case 'GET':\r\n            try{\r\n                \r\n                const response = await axios({\r\n                  headers: {\r\n                    \"x-api-key\": \"0c63e893-4bc0-44ca\",\r\n                  },\r\n                  url: \"/detail\",\r\n                  method: \"get\",\r\n                  baseURL:'https://ecomapp.io/data',\r\n                  params: {\r\n                    url: query.url,\r\n                    ecom: query.ecom,\r\n                    product_id: 0,\r\n                    db_entry: 0,\r\n                  },\r\n                }).then( async (response) => {\r\n                    if(response.data){\r\n                        const modifiers = await[],items = await[]\r\n\r\n                        Promise.all(                            \r\n                            response.data.items.map( async (item,i) =>{\r\n                                modifiers.concat(item.modifiers)\r\n                                item.product_name +=' - '\r\n                                \r\n                                response.data.items[i].modifiers.map(async (modifier)=>{\r\n                                    name +=' / '+ modifier.value\r\n                                })\r\n                                                             \r\n                                response.data.items[i] = item                               \r\n                            })                           \r\n                        )\r\n                        const product = await {\r\n                            title : response.data.items[0].product_title,\r\n                            description : '',\r\n                            images : response.data.items[0].images,\r\n                            items : response.data.items,\r\n                            options : modifiers\r\n                        }                                                \r\n                        res.status(200).json({success:true,product:product})\r\n                    }                    \r\n                })\r\n                \r\n                //console.log(response.data)\r\n                \r\n                /*\r\n                if(Array.isArray(response.data) && response.data.length>0){\r\n                    const variants = []\r\n                    Promise.all(\r\n                        response.data.map( async (variant)=>{\r\n                            variants.push({\r\n                                name : variant.modifiers,\r\n                                price: variant.product_price,\r\n                            })\r\n                        })\r\n                    )\r\n                    \r\n                    const prodObj = await{\r\n                        title: response.data[0].product_title,\r\n                        description: response.data[0].description ? response.data.description : '',\r\n                        price:response.data[0].product_price,\r\n                        images:response.data[0].images,\r\n                        sourceUrl:response.data[0].product_url,\r\n                        source:query.ecom,\r\n                        variants:variants,\r\n                    }\r\n                    \r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }else if(!Array.isArray(response.data)){\r\n                    const prodObj = await {\r\n                        title: response.data.product_title,\r\n                        description: response.data.description ? response.data.description : '',\r\n                        price:response.data.product_price,\r\n                        images:response.data.images,\r\n                        sourceUrl:response.data.product_url,\r\n                        source:query.ecom,\r\n                        variants:false,\r\n                    }\r\n                    res.status(200).json({success:true,productDetail:prodObj})\r\n                }else{\r\n                    res.status(200).json({success:true,productDetail:null})\r\n                }\r\n                */\r\n               \r\n            }catch(error){\r\n                //console.log(error)\r\n                res.status(500).json({success:false,error:error})\r\n            }\r\n            break;\r\n        case 'POST':\r\n            try{\r\n                const product = {}\r\n\r\n                res.status(201).json({success:true,data:product})\r\n\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}